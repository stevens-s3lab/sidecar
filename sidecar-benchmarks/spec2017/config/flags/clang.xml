<?xml version="1.0"?>
<!DOCTYPE flagsdescription
   SYSTEM "http://www.spec.org/dtd/cpuflags2.dtd"
>

<!-- Lines in this file will be up to this wide =============================================================================== -->


<!-- This flags file is both an example for the SPEC CPU(R) 2017 documentation and a useful flags file for results using clang.

     The first three lines at the top must be exactly as shown.  They claim that the file conforms to the DTD (Document Type
     Description) at the listed URL.  Results submitted to SPEC must use a well-formed flags file.  You can check your XML using
     a validating parser such as RXP, http://www.ltg.ed.ac.uk/~richard/rxp.html, also included in your kit as 'specrxp'.  See:
         http://www.spec.org/cpu2017/Docs/utility.html#specrxp.
     Or, you can use an on-line parser, such as:
         http://www.cogsci.ed.ac.uk/~richard/xml-check.html
         http://validator.w3.org/

     When results are displayed at www.spec.org, the XML file is transformed to HTML (using 'flags_dump', which is on your kit).
     You should ALSO validate the HTML version, which can be done at:
        http://validator.w3.org/
-->

<!--
     $Id$
-->

<flagsdescription>

<!-- filename   http://www.spec.org/cpu2017/Docs/flag-description.html#filename
                A complete (.rsf) result includes one or more embedded flags files.  When an embedded flags file is extracted, it
                will need a name.  The next line tells the tools what name to use when extracting.  -->
<filename>clang</filename>

<!-- title    http://www.spec.org/cpu2017/Docs/flag-description.html#title
              All flag descriptions MUST have a title.  It'll be used as the page title for the full HTML version, and as for
              page headings in HTML reports.  -->
<title>LLVM/clang C/C++ Compiler Flag Descriptions</title>

<style>
    <![CDATA[
    body { background: white; }
    ]]>
</style>

<!-- sw_environment     http://www.spec.org/cpu2017/Docs/flag-description.html#sw_environment
                        Information about shell resources, environment variables, and other software options or installation
                        settings.  They'll be included in both the flags dump and per-result flag report.  As the contents should
                        be HTML, it will save lots of time to just enclose the whole thing in a CDATA section.  See:
                        http://www.spec.org/cpu2017/Docs/flag-description.html#CDATA -->
<sw_environment>
   <![CDATA[
   <p>One or more of the following may have been used in the run.  If so, it will be listed in the notes sections.  Here
      is a brief guide to understanding them:</p>
   <ul>

      <li><p><b><kbd>LD_LIBRARY_PATH=&lt;directories&gt;</kbd></b>  (set via config file <samp>preENV</samp>)
            <br />LD_LIBRARY_PATH controls the search order for libraries.  Often, it can be defaulted.  Sometimes, it is
            explicitly set (as documented in the notes in the submission), in order to ensure that the correct versions of
            libraries are picked up.  </p></li>
      <li><p> <b><kbd>ulimit -s N</kbd></b><br />
            <b><kbd>ulimit -s unlimited</kbd></b><br />
            'ulimit' is a Unix commands, entered prior to the run.  It sets the stack size for the main process, either
            to N kbytes or to no limit.</p> </li>
   </ul>
   ]]>
</sw_environment>


<!-- fdo_settings      https://www.spec.org/cpu2017/Docs/flag-description.html#fdo_settings
                       Information about settings or programs used when doing feedback-directed optimization.  This section should
                       not be used to describe flags and settings already described by <flag> entries later in the file.  It is
                       intended primarily to describe settings for and programs used in fdo_* options.  They'll be included in
                       both the flags dump and per-result flag report.  As the contents should be HTML, it will save lots of time
                       to just enclose the whole thing in a CDATA section.  See
                       https://www.spec.org/cpu2017/Docs/flag-description.html#CDATA -->
<fdo_settings>
   <![CDATA[
    <p>For feedback-directed optimization, profile data generated by the first pass
        <a href="#user_F--fprofile-instr-generate">profile gathering flag</a> must be merged before it can be used by the
        <a href="#user_F--fprofile-instr-use">second pass</a>.  This merging is accomplished by using the <kbd>llvm-profdata</kbd>
            command, invoked in the FDO pass 1 post-run phase as:</p>
        <pre>xcrun llvm-profdata merge -output=default.profdata pgo_data</pre>
   ]]>
</fdo_settings>


<!-- header            http://www.spec.org/cpu2017/Docs/flag-description.html#header
                       The header section is entirely optional.  If it is provided, and no class is specified, then it will be
                       inserted verbatim at the top of the flags dump and the per-result flag report.

                       If a class is specified, that text will be inserted verbatim before flags of that class in the flags dump.
                       It is omitted from the per-result flag report.
-->
<header>
    <![CDATA[
<h2>Compilers: LLVM/clang 12.0 C/C++ Compiler</h2>

<p id="cnote"><b>Note:</b> Clang provides a wide array of options and command-line flags, described at
    <a href="https://clang.llvm.org/docs/ClangCommandLineReference.html">https://clang.llvm.org/docs/ClangCommandLineReference.html</a>
    and <a href="https://clang.llvm.org/docs/index.html">https://clang.llvm.org/docs/index.html</a>.
    This SPEC CPU flags file contains excerpts from and brief summaries of portions of that documentation.</p>

<p>As an LLVM subproject, Clang is licensed under the <a href="https://github.com/llvm/llvm-project/blob/main/clang/LICENSE.TXT">
    Apache 2.0 License with LLVM exceptions</a>.  A copy of the license is included in your SPEC CPU kit at
    <samp>$SPEC/Docs/licenses/Apache.v2.LLVM.txt</samp> and on the web at
    <a href="https://www.spec.org/cpu2017/Docs/licenses/Apache.v2.LLVM.txt">https://www.spec.org/cpu2017/Docs/licenses/Apache.v2.LLVM.txt</a>.
    The clang documentation is Copyright 2007-2021 The Clang Team.</p>

<p>SPEC's modifications are:<br />
   Copyright 2021 Standard Performance Evaluation Corporation</p>
    ]]>
</header>

<!-- Optimization flags ======================================================================================================= -->

<flag name="clang-g"
   class="optimization"
   regexp="-g(?:\d)?\b"
   compilers="clang-c,clang-cpp,no-fortran"
   >
   <example>-g</example>
   Produce debugging information.
</flag>

<flag name="F-O"
    class="optimization"
    >
    <example>-O</example>
    <![CDATA[
    <p>Set the optimization level to <kbd>-O2</kbd>.</p>

    <p>If multiple "O" options are used, with or without level numbers, the last such option is the one that is effective.</p>
    ]]>
    <include flag="F-O2" />
</flag>

<flag name="F-O0"
    class="optimization"
    >
    <example>-O0</example>
    <![CDATA[
    <p>Means "no optimization". This level compiles the fastest and generates the most debuggable code.</p>

    <p>If multiple "O" options are used, with or without level numbers, the last such option is the one that is effective.</p>
    ]]>
</flag>

<flag name="F-O1"
    class="optimization"
    >
    <example>-O1</example>
    <![CDATA[
    <p>Sets the optimization level to somewhere between <kbd>-O0</kbd> and <kbd>-O2</kbd>.</p>

    <p>If multiple "O" options are used, with or without level numbers, the last such option is the one that is effective.</p>
    ]]>
</flag>

<flag name="F-O2"
    class="optimization"
    >
    <example>-O2</example>
    <![CDATA[
    <p>Moderate level of optimization which enables most optimizations.  This is the default when no "<kbd>-O</kbd>" option is
        specified, or if no value is specified (i.e. "<kbd>-O</kbd>").</p>

    <p>If multiple "O" options are used, with or without level numbers, the last such option is the one that is effective.</p>
    ]]>
    <include flag="F-O1" />
</flag>

<flag name="F-O3"
    class="optimization"
    >
    <example>-O3</example>
    <![CDATA[
    <p> Like <kbd>-O2</kbd>, except that it enables optimizations that take longer to perform or that may generate larger code (in
        an attempt to make the program run faster).</p>

    <p>If multiple "O" options are used, with or without level numbers, the last such option is the one that is effective.</p>
    ]]>
    <include flag="F-O2" />
</flag>

<flag name="F-Os"
    class="optimization"
    >
    <example>-Os</example>
    <![CDATA[
    <p>Like <kbd>-O2</kbd> with extra optimizations to reduce code size.</p>

    <p>If multiple "O" options are used, with or without level numbers, the last such option is the one that is effective.</p>
    ]]>
    <include flag="F-O2" />
</flag>

<flag name="F-Oz"
    class="optimization"
    >
    <example>-Oz</example>
    <![CDATA[
    <p>Like <kbd>-Os</kbd> (and thus <kbd>-O2</kbd>), but reduces code size further.</p>

    <p>If multiple "O" options are used, with or without level numbers, the last such option is the one that is effective.</p>
    ]]>
    <include flag="F-Os" />
</flag>

<flag name="F-O4plus"
    regexp="-O(?:[4-9]|\d{2,})(?=\s|$)"
    class="optimization"
    >
    <example>-O4</example>
    <![CDATA[
    <p>Optimization levels 4 and higher are equivalent to <kbd>-O3</kbd>.</p>

    <p>If multiple "O" options are used, with or without level numbers, the last such option is the one that is effective.</p>
    ]]>
    <include flag="F-O3" />
</flag>

<flag name="clang-Ofast"
    class="optimization"
    regexp="-Ofast(?=\s|$)"
    >
    <example>-Ofast</example>
    <![CDATA[
    <p>Enables all the optimizations from <kbd>-O3</kbd> along with other aggressive optimizations that may violate strict
        compliance with language standards.</p>
    ]]>
    <include flag="F-O3" />
</flag>

<flag name="clang-arch"
    class="optimization"
    regexp="-m?arch[\s+=](i486|x86-64|arm64|native|auto)(?=\s|$)"
    >
    <example>-arch arm64</example>
    <![CDATA[
    <p>Specifies the architecture to build for.</p>
    ]]>
</flag>

<flag name="std-c"
    class="optimization"
    regexp="-std=(?:c|gnu)(?:89|99|11|17)(?=\s|$)"
    >
    <example>-std=gnu89</example>
    <![CDATA[
    <p>Selects the C language dialect.</p>
    ]]>
</flag>

<flag name="std-cpp"
   class="optimization"
   regexp="-std=c\+\+(?:98|03|11|14|17|2a)(?=\s|$)"
   >
   <example>-std=c++98</example>
   <![CDATA[
   <p>Selects the C++ language dialect.</p>
   ]]>
</flag>

<flag name="F-fprofile-instr-generate"
   regexp="-fprofile-instr-generate(?:=\S+)?(?=\s|$)"
   class="optimization">
   <example>-fprofile-instr-generate=pgo_data</example>
   <![CDATA[
   <p>
       Instruments code to collect execution counts for profile-driven feedback into the named file, or "default.profraw" if no
       filename is supplied.
   </p>
   ]]>
</flag>

<flag name="F-fprofile-instr-use"
   class="optimization">
   <![CDATA[
   <p>
     Applies information from a profile run in order to improve optimization.
   </p>
   ]]>
</flag>

<flag name="Wl-stack"
   class="optimization"
   regexp="-Wl,-stack_size,(?:0x)?[a-fA-F0-9]+\b">
   <example>-Wl,-stack_size,0xnnn</example>
   <![CDATA[<p>
      Add the linker flag that requests a large stack.  This flag is likely to be important only to one or
      two of the floating point speed benchmarks.  In accordance with the rules for Base, it is set for
      all of fpspeed in base.  See: <a
         href="https://www.spec.org/cpu2017/Docs/runrules.html#BaseFlags">
         https://www.spec.org/cpu2017/Docs/runrules.html#BaseFlags</a>.
   </p>]]>
</flag>


<!-- Portability flags ======================================================================================================== -->

<flag name="clang-unsigned-char"
    class="portability"
    regexp="-funsigned-char(?=\s|$)"
    >
    <example>-funsigned-char</example>
    <![CDATA[
    <p>This option instructs the compiler to treat char type as unsigned.</p>
    ]]>
</flag>

<flag name="F-Dfinite:isfinite"
    class="portability"
    >
    <![CDATA[
    <p>Replaces calls to <kbd>finite()</kbd> (specified only in IEEE-754) with calls to <kbd>isfinite()</kbd>, which is specified
    by both <a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/isfinite.html">POSIX.1-2004 and later</a>, and the
    ISO C99 standard.</p>
    ]]>
</flag>


<!-- Flags that identify the compiler being used ============================================================================== -->

<flag name="compiler_path_eater"
    class="compiler"
    regexp="/\S+/(CC|g(cc|\+\+)|c(c|\+\+)|FC|clang(\+\+)?)(?=\s|$)"
    >
    <example>/path/to/{clang|clang++}</example>
    This flag is just to trim the path from the compiler line.
    <include text="$1"/>
    <display enable="0"/>
</flag>

<flag name="clang-c"
    class="compiler"
    regexp="\bclang(?=\s|$)"
    >
    <example>clang</example>
    <![CDATA[
    <p>clang is a C compiler frontend for the LLVM compiler toolkit backend.</p>
    ]]>
</flag>

<flag name="clang-cpp"
    class="compiler"
    regexp="\bclang\+\+(?=\s|$)"
    >
    <example>clang++</example>
    <![CDATA[
    <p>clang++ is a C++ compiler frontend for the LLVM compiler toolkit backend.</p>
    ]]>
</flag>

<flag name="no-fortran"
    class="compiler"
    regexp="\bXXX-if-you-have-a-Fortran-compiler-specify-it-here-XXX(?=\s|$)"
    >
    <example>N/A</example>
    <![CDATA[
    <p>This is not a Fortran compiler.</p>
    ]]>
</flag>



<!-- "Other" flags ============================================================================================================ -->

<flag name="Link_path"
    class="other"
    regexp="-L\s*\S+(?=\s|$)"
    >
    <example>-L/path/to/libs</example>
    <![CDATA[
    <p>Specifies a directory to search for libraries. Use <kbd>-L</kbd> to add directories to the search path for library
        files.  Multiple <kbd>-L</kbd> options are valid. However, the position of multiple <kbd>-L</kbd> options is important
        relative to <kbd>-l</kbd> options supplied.</p>
    ]]>
</flag>

<flag name="Include_path"
    class="other"
    regexp="-I\s*\S+(?=\s|$)"
    >
    <example>-I /path/to/include</example>
    <![CDATA[
    <p>Specifies a directory to search for include files. Use <kbd>-I</kbd> to add directories to the search path for include
        files.  Multiple <kbd>-I</kbd> options are valid.</p>
    ]]>
</flag>


<!-- vim: set ai filetype=xml syntax=xml expandtab nosmarttab ts=8 sw=4 colorcolumn=132: -->
</flagsdescription>
