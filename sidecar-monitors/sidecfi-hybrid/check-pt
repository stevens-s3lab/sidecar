#include <stdio.h>
#include <stdint.h>

int main() {
    uint32_t eax, ebx, ecx, edx;

    // First, check Intel PT Features using CPUID Leaf 0x14, Sub-leaf 0x0
    eax = 0x14;  // Intel PT Enumeration Leaf
    ecx = 0x0;   // Sub-leaf 0

    __asm__ __volatile__ (
        "cpuid"
        : "=a"(eax), "=b"(ebx), "=c"(ecx), "=d"(edx)
        : "a"(eax), "c"(ecx)
    );

    printf("Intel PT Features (CPUID Leaf 0x14, Sub-leaf 0):\n");
    printf("EBX: 0x%08x\n", ebx);
    printf("DisTNT (bit 8): %s\n", (ebx & (1 << 8)) ? "Supported" : "Not Supported");
    printf("Configurable PSB (bit 1): %s\n", (ebx & (1 << 1)) ? "Supported" : "Not Supported");
    printf("MTC suppression (bit 3): %s\n", (ebx & (1 << 3)) ? "Supported" : "Not Supported");
    printf("PTWRITE (bit 4): %s\n", (ebx & (1 << 4)) ? "Supported" : "Not Supported");
    printf("Power Event Trace (bit 5): %s\n", (ebx & (1 << 5)) ? "Supported" : "Not Supported");

    // Now, check for FUPonPTW using CPUID Leaf 0x07, Sub-leaf 0x01
    eax = 0x07;
    ecx = 0x01;  // Sub-leaf 1

    __asm__ __volatile__ (
        "cpuid"
        : "=a"(eax), "=b"(ebx), "=c"(ecx), "=d"(edx)
        : "a"(eax), "c"(ecx)
    );

    // Check EBX bit 4 to determine if FUPonPTW is supported
    printf("FUPonPTW (CPUID Leaf 0x07, Sub-leaf 1, EBX[4]): %s\n", (ebx & (1 << 4)) ? "Supported" : "Not Supported");

    return 0;
}

